/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct JumpShip200ResponseData {
    #[serde(rename = "nav")]
    pub nav: Box<models::ShipNav>,
    #[serde(rename = "cooldown")]
    pub cooldown: Box<models::Cooldown>,
    #[serde(rename = "transaction")]
    pub transaction: Box<models::MarketTransaction>,
    #[serde(rename = "agent")]
    pub agent: Box<models::Agent>,
}

impl JumpShip200ResponseData {
    pub fn new(nav: models::ShipNav, cooldown: models::Cooldown, transaction: models::MarketTransaction, agent: models::Agent) -> JumpShip200ResponseData {
        JumpShip200ResponseData {
            nav: Box::new(nav),
            cooldown: Box::new(cooldown),
            transaction: Box::new(transaction),
            agent: Box::new(agent),
        }
    }
}

