/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// FactionSymbol : The symbol of the faction.
/// The symbol of the faction.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FactionSymbol {
    #[serde(rename = "COSMIC")]
    Cosmic,
    #[serde(rename = "VOID")]
    Void,
    #[serde(rename = "GALACTIC")]
    Galactic,
    #[serde(rename = "QUANTUM")]
    Quantum,
    #[serde(rename = "DOMINION")]
    Dominion,
    #[serde(rename = "ASTRO")]
    Astro,
    #[serde(rename = "CORSAIRS")]
    Corsairs,
    #[serde(rename = "OBSIDIAN")]
    Obsidian,
    #[serde(rename = "AEGIS")]
    Aegis,
    #[serde(rename = "UNITED")]
    United,
    #[serde(rename = "SOLITARY")]
    Solitary,
    #[serde(rename = "COBALT")]
    Cobalt,
    #[serde(rename = "OMEGA")]
    Omega,
    #[serde(rename = "ECHO")]
    Echo,
    #[serde(rename = "LORDS")]
    Lords,
    #[serde(rename = "CULT")]
    Cult,
    #[serde(rename = "ANCIENTS")]
    Ancients,
    #[serde(rename = "SHADOW")]
    Shadow,
    #[serde(rename = "ETHEREAL")]
    Ethereal,

}

impl std::fmt::Display for FactionSymbol {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Cosmic => write!(f, "COSMIC"),
            Self::Void => write!(f, "VOID"),
            Self::Galactic => write!(f, "GALACTIC"),
            Self::Quantum => write!(f, "QUANTUM"),
            Self::Dominion => write!(f, "DOMINION"),
            Self::Astro => write!(f, "ASTRO"),
            Self::Corsairs => write!(f, "CORSAIRS"),
            Self::Obsidian => write!(f, "OBSIDIAN"),
            Self::Aegis => write!(f, "AEGIS"),
            Self::United => write!(f, "UNITED"),
            Self::Solitary => write!(f, "SOLITARY"),
            Self::Cobalt => write!(f, "COBALT"),
            Self::Omega => write!(f, "OMEGA"),
            Self::Echo => write!(f, "ECHO"),
            Self::Lords => write!(f, "LORDS"),
            Self::Cult => write!(f, "CULT"),
            Self::Ancients => write!(f, "ANCIENTS"),
            Self::Shadow => write!(f, "SHADOW"),
            Self::Ethereal => write!(f, "ETHEREAL"),
        }
    }
}

impl Default for FactionSymbol {
    fn default() -> FactionSymbol {
        Self::Cosmic
    }
}

