/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SystemType : The type of system.
/// The type of system.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SystemType {
    #[serde(rename = "NEUTRON_STAR")]
    NeutronStar,
    #[serde(rename = "RED_STAR")]
    RedStar,
    #[serde(rename = "ORANGE_STAR")]
    OrangeStar,
    #[serde(rename = "BLUE_STAR")]
    BlueStar,
    #[serde(rename = "YOUNG_STAR")]
    YoungStar,
    #[serde(rename = "WHITE_DWARF")]
    WhiteDwarf,
    #[serde(rename = "BLACK_HOLE")]
    BlackHole,
    #[serde(rename = "HYPERGIANT")]
    Hypergiant,
    #[serde(rename = "NEBULA")]
    Nebula,
    #[serde(rename = "UNSTABLE")]
    Unstable,

}

impl std::fmt::Display for SystemType {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::NeutronStar => write!(f, "NEUTRON_STAR"),
            Self::RedStar => write!(f, "RED_STAR"),
            Self::OrangeStar => write!(f, "ORANGE_STAR"),
            Self::BlueStar => write!(f, "BLUE_STAR"),
            Self::YoungStar => write!(f, "YOUNG_STAR"),
            Self::WhiteDwarf => write!(f, "WHITE_DWARF"),
            Self::BlackHole => write!(f, "BLACK_HOLE"),
            Self::Hypergiant => write!(f, "HYPERGIANT"),
            Self::Nebula => write!(f, "NEBULA"),
            Self::Unstable => write!(f, "UNSTABLE"),
        }
    }
}

impl Default for SystemType {
    fn default() -> SystemType {
        Self::NeutronStar
    }
}

