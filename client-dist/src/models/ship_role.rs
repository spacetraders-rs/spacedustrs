/*
 * SpaceTraders API
 *
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// ShipRole : The registered role of the ship
/// The registered role of the ship
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ShipRole {
    #[serde(rename = "FABRICATOR")]
    Fabricator,
    #[serde(rename = "HARVESTER")]
    Harvester,
    #[serde(rename = "HAULER")]
    Hauler,
    #[serde(rename = "INTERCEPTOR")]
    Interceptor,
    #[serde(rename = "EXCAVATOR")]
    Excavator,
    #[serde(rename = "TRANSPORT")]
    Transport,
    #[serde(rename = "REPAIR")]
    Repair,
    #[serde(rename = "SURVEYOR")]
    Surveyor,
    #[serde(rename = "COMMAND")]
    Command,
    #[serde(rename = "CARRIER")]
    Carrier,
    #[serde(rename = "PATROL")]
    Patrol,
    #[serde(rename = "SATELLITE")]
    Satellite,
    #[serde(rename = "EXPLORER")]
    Explorer,
    #[serde(rename = "REFINERY")]
    Refinery,

}

impl std::fmt::Display for ShipRole {
    fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
        match self {
            Self::Fabricator => write!(f, "FABRICATOR"),
            Self::Harvester => write!(f, "HARVESTER"),
            Self::Hauler => write!(f, "HAULER"),
            Self::Interceptor => write!(f, "INTERCEPTOR"),
            Self::Excavator => write!(f, "EXCAVATOR"),
            Self::Transport => write!(f, "TRANSPORT"),
            Self::Repair => write!(f, "REPAIR"),
            Self::Surveyor => write!(f, "SURVEYOR"),
            Self::Command => write!(f, "COMMAND"),
            Self::Carrier => write!(f, "CARRIER"),
            Self::Patrol => write!(f, "PATROL"),
            Self::Satellite => write!(f, "SATELLITE"),
            Self::Explorer => write!(f, "EXPLORER"),
            Self::Refinery => write!(f, "REFINERY"),
        }
    }
}

impl Default for ShipRole {
    fn default() -> ShipRole {
        Self::Fabricator
    }
}

